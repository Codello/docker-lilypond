name: Docker Image
on:
  workflow_dispatch:
    inputs:
      version:
        description: LilyPond version to build
        type: string
        required: true
      tags:
        description: Additional tags to apply to to the image
        type: string
        required: false
      push:
        description: Whether to also push the built image
        type: boolean
        required: false
  pull_request:
  push:
    branches: [main]

env:
  TEST_TAG: "codello/lilypond:test"

jobs:
  setup:
    name: Setup Build Workflow
    runs-on: ubuntu-latest
    outputs:
      matrix: ${{ steps.matrix.outputs.matrix }}
    steps:
      - name: Checkout Code
        uses: actions/checkout@v3
      - name: Load version matrix
        id: matrix
        env:
          VERSION: ${{ github.events.inputs.version }}
          TAGS: ${{ github.events.inputs.tags }}
        run: |
          if [ "$VERSION" ]; then
            VALUES=$(jq -nc '[{version: env.VERSION, tags: (env.TAGS // "" | split("\\s*,\\s*"; "") | map(select(length > 0)))}]')
          else
            VALUES=$(jq -c '[to_entries[] | .value * {tags: [.key, (.value.tags // [])[]]}]' versions.json)
          fi
          MATRIX=$(jq -c '{include: .}' <<< "$VALUES")
          echo "::set-output name=matrix::$MATRIX"

  build:
    name: Build LilyPond ${{ matrix.version }}
    runs-on: ubuntu-latest
    needs: [setup]
    strategy:
      fail-fast: false
      matrix: ${{ fromJSON(needs.setup.outputs.matrix) }}
    steps:
      - name: Checkout Code
        uses: actions/checkout@v3
        with: {submodules: recursive}
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2
      - name: Generate image tags
        id: meta
        uses: docker/metadata-action@v4
        with:
          images: |
            codello/lilypond
            ghcr.io/codello/lilypond
          tags: |
            type=raw,value=${{ matrix.version }}
            ${{ join(matrix.tags, '\n') }}
          labels: |
            maintainer=Kim Wittenburg <codello@wittenburg.kim>
            org.opencontainers.image.version=${{ matrix.version }}
      - name: Login to Docker Hub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}
      - name: Login to GitHub Container Registry
        uses: docker/login-action@v2
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}
      - name: Build Image
        uses: docker/build-push-action@v3
        with:
          context: .
          push: false
          load: true
          tags: ${{ env.TEST_TAG }}
          build-args: VERSION=${{ matrix.version }}
      - name: Test Image
        run: |
          docker run -v $(pwd):/work "$TEST_TAG" test.ly
          test -f test.pdf
      - name: Setup tmate session
        if: ${{ failure() }}
        uses: mxschmitt/action-tmate@v3
      - name: Push Image
        if: github.ref == format('refs/heads/{0}', github.event.repository.default_branch)
        uses: docker/build-push-action@v3
        with:
          context: .
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.output.labels }}
          build-args: VERSION=${{ matrix.version }}
